import pygame
import random
import sys
pygame.init()
WIDTH, HEIGHT = 600, 600
GRID_SIZE = 20
GRID_WIDTH = WIDTH // GRID_SIZE
GRID_HEIGHT = HEIGHT // GRID_SIZE
FPS = 10
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
ORANGE = (255, 165, 0)
YELLOW = (255, 255, 0)
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Snake Game with Exploding Food")
clock = pygame.time.Clock()
class Snake:
	def __init__(self):
		self.positions = [(GRID_WIDTH // 2, GRID_HEIGHT // 2)]
		self.direction = (1, 0)
		self.growth_pending = 0
		self.score = 0
		self.game_over = False
		
	def get_head_position(self):
		return self.positions[0]
		
	def update(self):
		if self.game_over:
			return
			
		head_x, head_y = self.get_head_position()
		dir_x, dir_y = self.direction
		new_x = (head_x + dir_x) % GRID_WIDTH
		new_y = (head_y + dir_y) % GRID_HEIGHT
		if (new_x, new_y) in self.positions[1:]:
			self.game_over = True
			return
			
		self.positions.insert(0, (new_x, new_y))
		if self.growth_pending > 0:
			self.growth_pending -= 1
			
		else:
			self.positions.pop()
			
		
	def change_direction(self, direction):
		if (direction[0] * -1, direction[1] * -1) != self.direction:
			self.direction = direction
			
		
	def grow(self, amount=1):
		self.growth_pending += amount
		self.score += amount
		
	def draw(self, surface):
		for i, (x, y) in enumerate(self.positions):
			color = GREEN if i > 0 else BLUE
			rect = pygame.Rect(x * GRID_SIZE, y * GRID_SIZE, GRID_SIZE, GRID_SIZE)
			pygame.draw.rect(surface, color, rect)
			pygame.draw.rect(surface, BLACK, rect, 1)
			
		
	
class Food:
	def __init__(self):
		self.position = (0, 0)
		self.color = RED
		self.relocate()
		
	def relocate(self):
		self.position = (random.randint(0, GRID_WIDTH - 1), random.randint(0, GRID_HEIGHT - 1))
		
	def draw(self, surface):
		rect = pygame.Rect(self.position[0] * GRID_SIZE, self.position[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE)
		pygame.draw.rect(surface, self.color, rect)
		pygame.draw.rect(surface, BLACK, rect, 1)
		
	
class Explosion:
	def __init__(self, position):
		self.position = position
		self.radius = 0
		self.max_radius = GRID_SIZE * 3
		self.growth_rate = 2
		self.color = ORANGE
		self.active = True
		
	def update(self):
		if not self.active:
			return
			
		self.radius += self.growth_rate
		if self.radius >= self.max_radius:
			self.active = False
			
		
	def draw(self, surface):
		if not self.active:
			return
			
		pygame.draw.circle(surface, self.color, (self.position[0] * GRID_SIZE + GRID_SIZE // 2, self.position[1] * GRID_SIZE + GRID_SIZE // 2), self.radius)
		
	
def draw_text(surface, text, size, x, y, color=WHITE):
	font = pygame.font.Font(None, size)
	text_surface = font.render(text, True, color)
	text_rect = text_surface.get_rect()
	text_rect.midtop = (x, y)
	surface.blit(text_surface, text_rect)
	
def main():
	snake = Snake()
	food = Food()
	explosions = []
	running = True
	while running:
		for event in pygame.event.get():
			if event.type == pygame.QUIT:
				running = False
				
			elif event.type == pygame.KEYDOWN:
				if event.key == pygame.K_UP:
					snake.change_direction((0, -1))
					
				elif event.key == pygame.K_DOWN:
					snake.change_direction((0, 1))
					
				elif event.key == pygame.K_LEFT:
					snake.change_direction((-1, 0))
					
				elif event.key == pygame.K_RIGHT:
					snake.change_direction((1, 0))
					
				elif event.key == pygame.K_r and snake.game_over:
					snake = Snake()
					food = Food()
					explosions = []
					
				
			
		if not snake.game_over:
			snake.update()
			if snake.get_head_position() == food.position:
				explosions.append(Explosion(food.position))
				snake.grow()
				food.relocate()
				
			for explosion in explosions:
				explosion.update()
				
			explosions = [e for e in explosions if e.active]
			
		screen.fill(BLACK)
		for explosion in explosions:
			explosion.draw(screen)
			
		snake.draw(screen)
		food.draw(screen)
		draw_text(screen, f"Score: {snake.score}", 24, WIDTH // 2, 10)
		if snake.game_over:
			draw_text(screen, "GAME OVER", 48, WIDTH // 2, HEIGHT // 3)
			draw_text(screen, "Press R to restart", 24, WIDTH // 2, HEIGHT // 2)
			
		pygame.display.flip()
		clock.tick(FPS)
		
	pygame.quit()
	sys.exit()
	
if __name__ == "__main__":
	main()
